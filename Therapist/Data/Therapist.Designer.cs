//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("Therapist", "FK_Consultations_Doctors", "Doctor", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Therapist.Data.Doctor), "Consultation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Therapist.Data.Consultation), true)]
[assembly: EdmRelationshipAttribute("Therapist", "FK_Consultations_Patients", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Therapist.Data.Patient), "Consultation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Therapist.Data.Consultation), true)]
[assembly: EdmRelationshipAttribute("Therapist", "FK_Visits_Doctors", "Doctor", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Therapist.Data.Doctor), "Visit", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Therapist.Data.Visit), true)]
[assembly: EdmRelationshipAttribute("Therapist", "FK_Visits_Patients", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Therapist.Data.Patient), "Visit", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Therapist.Data.Visit), true)]
[assembly: EdmRelationshipAttribute("Therapist", "FK_User_Doctor", "Doctor", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Therapist.Data.Doctor), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Therapist.Data.User), true)]

#endregion

namespace Therapist.Data
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class TherapistContainer1 : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект TherapistContainer1, используя строку соединения из раздела "TherapistContainer1" файла конфигурации приложения.
        /// </summary>
        public TherapistContainer1() : base("name=TherapistContainer1", "TherapistContainer1")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта TherapistContainer1.
        /// </summary>
        public TherapistContainer1(string connectionString) : base(connectionString, "TherapistContainer1")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта TherapistContainer1.
        /// </summary>
        public TherapistContainer1(EntityConnection connection) : base(connection, "TherapistContainer1")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Consultation> Consultations
        {
            get
            {
                if ((_Consultations == null))
                {
                    _Consultations = base.CreateObjectSet<Consultation>("Consultations");
                }
                return _Consultations;
            }
        }
        private ObjectSet<Consultation> _Consultations;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Visit> Visits
        {
            get
            {
                if ((_Visits == null))
                {
                    _Visits = base.CreateObjectSet<Visit>("Visits");
                }
                return _Visits;
            }
        }
        private ObjectSet<Visit> _Visits;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Doctor> Doctors
        {
            get
            {
                if ((_Doctors == null))
                {
                    _Doctors = base.CreateObjectSet<Doctor>("Doctors");
                }
                return _Doctors;
            }
        }
        private ObjectSet<Doctor> _Doctors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Patient> Patients
        {
            get
            {
                if ((_Patients == null))
                {
                    _Patients = base.CreateObjectSet<Patient>("Patients");
                }
                return _Patients;
            }
        }
        private ObjectSet<Patient> _Patients;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Consultations. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToConsultations(Consultation consultation)
        {
            base.AddObject("Consultations", consultation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Visits. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToVisits(Visit visit)
        {
            base.AddObject("Visits", visit);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Doctors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDoctors(Doctor doctor)
        {
            base.AddObject("Doctors", doctor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Patients. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPatients(Patient patient)
        {
            base.AddObject("Patients", patient);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Users. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Therapist", Name="Consultation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Consultation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Consultation.
        /// </summary>
        /// <param name="consultationID">Исходное значение свойства ConsultationID.</param>
        public static Consultation CreateConsultation(global::System.Int32 consultationID)
        {
            Consultation consultation = new Consultation();
            consultation.ConsultationID = consultationID;
            return consultation;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ConsultationID
        {
            get
            {
                return _ConsultationID;
            }
            set
            {
                if (_ConsultationID != value)
                {
                    OnConsultationIDChanging(value);
                    ReportPropertyChanging("ConsultationID");
                    _ConsultationID = StructuralObject.SetValidValue(value, "ConsultationID");
                    ReportPropertyChanged("ConsultationID");
                    OnConsultationIDChanged();
                }
            }
        }
        private global::System.Int32 _ConsultationID;
        partial void OnConsultationIDChanging(global::System.Int32 value);
        partial void OnConsultationIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ScheduleDate
        {
            get
            {
                return _ScheduleDate;
            }
            set
            {
                OnScheduleDateChanging(value);
                ReportPropertyChanging("ScheduleDate");
                _ScheduleDate = StructuralObject.SetValidValue(value, "ScheduleDate");
                ReportPropertyChanged("ScheduleDate");
                OnScheduleDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ScheduleDate;
        partial void OnScheduleDateChanging(Nullable<global::System.DateTime> value);
        partial void OnScheduleDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> ScheduleTime
        {
            get
            {
                return _ScheduleTime;
            }
            set
            {
                OnScheduleTimeChanging(value);
                ReportPropertyChanging("ScheduleTime");
                _ScheduleTime = StructuralObject.SetValidValue(value, "ScheduleTime");
                ReportPropertyChanged("ScheduleTime");
                OnScheduleTimeChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _ScheduleTime;
        partial void OnScheduleTimeChanging(Nullable<global::System.TimeSpan> value);
        partial void OnScheduleTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PatientID
        {
            get
            {
                return _PatientID;
            }
            set
            {
                OnPatientIDChanging(value);
                ReportPropertyChanging("PatientID");
                _PatientID = StructuralObject.SetValidValue(value, "PatientID");
                ReportPropertyChanged("PatientID");
                OnPatientIDChanged();
            }
        }
        private Nullable<global::System.Int32> _PatientID;
        partial void OnPatientIDChanging(Nullable<global::System.Int32> value);
        partial void OnPatientIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DoctorID
        {
            get
            {
                return _DoctorID;
            }
            set
            {
                OnDoctorIDChanging(value);
                ReportPropertyChanging("DoctorID");
                _DoctorID = StructuralObject.SetValidValue(value, "DoctorID");
                ReportPropertyChanged("DoctorID");
                OnDoctorIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DoctorID;
        partial void OnDoctorIDChanging(Nullable<global::System.Int32> value);
        partial void OnDoctorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, true, "Reason");
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true, "Notes");
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Consultations_Doctors", "Doctor")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_Consultations_Doctors", "Doctor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_Consultations_Doctors", "Doctor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_Consultations_Doctors", "Doctor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("Therapist.FK_Consultations_Doctors", "Doctor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Consultations_Patients", "Patient")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("Therapist.FK_Consultations_Patients", "Patient").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("Therapist.FK_Consultations_Patients", "Patient").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("Therapist.FK_Consultations_Patients", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("Therapist.FK_Consultations_Patients", "Patient", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Therapist", Name="Doctor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Doctor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Doctor.
        /// </summary>
        /// <param name="doctorID">Исходное значение свойства DoctorID.</param>
        public static Doctor CreateDoctor(global::System.Int32 doctorID)
        {
            Doctor doctor = new Doctor();
            doctor.DoctorID = doctorID;
            return doctor;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorID
        {
            get
            {
                return _DoctorID;
            }
            set
            {
                if (_DoctorID != value)
                {
                    OnDoctorIDChanging(value);
                    ReportPropertyChanging("DoctorID");
                    _DoctorID = StructuralObject.SetValidValue(value, "DoctorID");
                    ReportPropertyChanged("DoctorID");
                    OnDoctorIDChanged();
                }
            }
        }
        private global::System.Int32 _DoctorID;
        partial void OnDoctorIDChanging(global::System.Int32 value);
        partial void OnDoctorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Skils
        {
            get
            {
                return _Skils;
            }
            set
            {
                OnSkilsChanging(value);
                ReportPropertyChanging("Skils");
                _Skils = StructuralObject.SetValidValue(value, true, "Skils");
                ReportPropertyChanged("Skils");
                OnSkilsChanged();
            }
        }
        private global::System.String _Skils;
        partial void OnSkilsChanging(global::System.String value);
        partial void OnSkilsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true, "Phone");
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Consultations_Doctors", "Consultation")]
        public EntityCollection<Consultation> Consultations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Consultation>("Therapist.FK_Consultations_Doctors", "Consultation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Consultation>("Therapist.FK_Consultations_Doctors", "Consultation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Visits_Doctors", "Visit")]
        public EntityCollection<Visit> Visit
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Visit>("Therapist.FK_Visits_Doctors", "Visit");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Visit>("Therapist.FK_Visits_Doctors", "Visit", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_User_Doctor", "User")]
        public EntityCollection<User> User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("Therapist.FK_User_Doctor", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("Therapist.FK_User_Doctor", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Therapist", Name="Patient")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Patient : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Patient.
        /// </summary>
        /// <param name="patientID">Исходное значение свойства PatientID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Patient CreatePatient(global::System.Int32 patientID, global::System.String name)
        {
            Patient patient = new Patient();
            patient.PatientID = patientID;
            patient.Name = name;
            return patient;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PatientID
        {
            get
            {
                return _PatientID;
            }
            set
            {
                if (_PatientID != value)
                {
                    OnPatientIDChanging(value);
                    ReportPropertyChanging("PatientID");
                    _PatientID = StructuralObject.SetValidValue(value, "PatientID");
                    ReportPropertyChanged("PatientID");
                    OnPatientIDChanged();
                }
            }
        }
        private global::System.Int32 _PatientID;
        partial void OnPatientIDChanging(global::System.Int32 value);
        partial void OnPatientIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true, "Phone");
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Birthdate
        {
            get
            {
                return _Birthdate;
            }
            set
            {
                OnBirthdateChanging(value);
                ReportPropertyChanging("Birthdate");
                _Birthdate = StructuralObject.SetValidValue(value, "Birthdate");
                ReportPropertyChanged("Birthdate");
                OnBirthdateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Birthdate;
        partial void OnBirthdateChanging(Nullable<global::System.DateTime> value);
        partial void OnBirthdateChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Consultations_Patients", "Consultation")]
        public EntityCollection<Consultation> Consultations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Consultation>("Therapist.FK_Consultations_Patients", "Consultation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Consultation>("Therapist.FK_Consultations_Patients", "Consultation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Visits_Patients", "Visit")]
        public EntityCollection<Visit> Visit
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Visit>("Therapist.FK_Visits_Patients", "Visit");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Visit>("Therapist.FK_Visits_Patients", "Visit", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Therapist", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта User.
        /// </summary>
        /// <param name="userID">Исходное значение свойства UserID.</param>
        /// <param name="roleID">Исходное значение свойства RoleID.</param>
        public static User CreateUser(global::System.Int32 userID, global::System.Int16 roleID)
        {
            User user = new User();
            user.UserID = userID;
            user.RoleID = roleID;
            return user;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value, "UserID");
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Int32 _UserID;
        partial void OnUserIDChanging(global::System.Int32 value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true, "UserName");
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true, "Password");
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DoctorID
        {
            get
            {
                return _DoctorID;
            }
            set
            {
                OnDoctorIDChanging(value);
                ReportPropertyChanging("DoctorID");
                _DoctorID = StructuralObject.SetValidValue(value, "DoctorID");
                ReportPropertyChanged("DoctorID");
                OnDoctorIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DoctorID;
        partial void OnDoctorIDChanging(Nullable<global::System.Int32> value);
        partial void OnDoctorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value, "RoleID");
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int16 _RoleID;
        partial void OnRoleIDChanging(global::System.Int16 value);
        partial void OnRoleIDChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_User_Doctor", "Doctor")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_User_Doctor", "Doctor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_User_Doctor", "Doctor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_User_Doctor", "Doctor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("Therapist.FK_User_Doctor", "Doctor", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Therapist", Name="Visit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Visit : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Visit.
        /// </summary>
        /// <param name="visitID">Исходное значение свойства VisitID.</param>
        public static Visit CreateVisit(global::System.Int32 visitID)
        {
            Visit visit = new Visit();
            visit.VisitID = visitID;
            return visit;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 VisitID
        {
            get
            {
                return _VisitID;
            }
            set
            {
                if (_VisitID != value)
                {
                    OnVisitIDChanging(value);
                    ReportPropertyChanging("VisitID");
                    _VisitID = StructuralObject.SetValidValue(value, "VisitID");
                    ReportPropertyChanged("VisitID");
                    OnVisitIDChanged();
                }
            }
        }
        private global::System.Int32 _VisitID;
        partial void OnVisitIDChanging(global::System.Int32 value);
        partial void OnVisitIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PatientID
        {
            get
            {
                return _PatientID;
            }
            set
            {
                OnPatientIDChanging(value);
                ReportPropertyChanging("PatientID");
                _PatientID = StructuralObject.SetValidValue(value, "PatientID");
                ReportPropertyChanged("PatientID");
                OnPatientIDChanged();
            }
        }
        private Nullable<global::System.Int32> _PatientID;
        partial void OnPatientIDChanging(Nullable<global::System.Int32> value);
        partial void OnPatientIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DoctorID
        {
            get
            {
                return _DoctorID;
            }
            set
            {
                OnDoctorIDChanging(value);
                ReportPropertyChanging("DoctorID");
                _DoctorID = StructuralObject.SetValidValue(value, "DoctorID");
                ReportPropertyChanged("DoctorID");
                OnDoctorIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DoctorID;
        partial void OnDoctorIDChanging(Nullable<global::System.Int32> value);
        partial void OnDoctorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, true, "Reason");
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true, "Notes");
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> VisitDate
        {
            get
            {
                return _VisitDate;
            }
            set
            {
                OnVisitDateChanging(value);
                ReportPropertyChanging("VisitDate");
                _VisitDate = StructuralObject.SetValidValue(value, "VisitDate");
                ReportPropertyChanged("VisitDate");
                OnVisitDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _VisitDate;
        partial void OnVisitDateChanging(Nullable<global::System.DateTime> value);
        partial void OnVisitDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Prescription
        {
            get
            {
                return _Prescription;
            }
            set
            {
                OnPrescriptionChanging(value);
                ReportPropertyChanging("Prescription");
                _Prescription = StructuralObject.SetValidValue(value, true, "Prescription");
                ReportPropertyChanged("Prescription");
                OnPrescriptionChanged();
            }
        }
        private global::System.String _Prescription;
        partial void OnPrescriptionChanging(global::System.String value);
        partial void OnPrescriptionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Visits_Doctors", "Doctor")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_Visits_Doctors", "Doctor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_Visits_Doctors", "Doctor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("Therapist.FK_Visits_Doctors", "Doctor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("Therapist.FK_Visits_Doctors", "Doctor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Therapist", "FK_Visits_Patients", "Patient")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("Therapist.FK_Visits_Patients", "Patient").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("Therapist.FK_Visits_Patients", "Patient").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("Therapist.FK_Visits_Patients", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("Therapist.FK_Visits_Patients", "Patient", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
